package com.ssm.controller.admin;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.ssm.po.FriendlyLink;
import com.ssm.service.admin.friendlylink.FriendlyLinkService;

@Controller
@RequestMapping("friendlylink")
public class FriendlyLinkController {
	@Autowired
	private FriendlyLinkService service;
	
	@Value("${pic.friendlylink}")
	private String fUrl;
	
	@RequestMapping(value = "upload", method = RequestMethod.POST)
	@ResponseBody
	public String uploadTeacherPic(@RequestParam(value = "file") MultipartFile file) throws IOException{
		if (file != null) {
			// 原名字
			String name = file.getOriginalFilename();
			// 上传文件位置
			String uploadPath = this.fUrl;
			// 扩展名
			String type = name.substring(name.lastIndexOf("."));
			// 随机号
			String uuid = UUID.randomUUID().toString();
			// 路径
			String path = uploadPath + uuid + type;
			File f = new File(path);
			// 新名字
			String newName = uuid + type;
			file.transferTo(f);
			return newName;     
		}
		return "error";
	}
	
	@RequestMapping(value="all",method=RequestMethod.POST)
	@ResponseBody
	public List<FriendlyLink> findAll(){
		return service.findAll();
	}
	
	@RequestMapping(value="delete",method=RequestMethod.POST)
	@ResponseBody
	public String delete(int id){
		FriendlyLink link = service.findFriendlyLinkById(id);
		String imgUrl = link.getImgUrl();
		File file=new File(imgUrl);
		int deleteLinkById = service.deleteLinkById(id);
		if(deleteLinkById>0){
			file.delete();
			return "success";
		}
		return "error";
	}
	
	@RequestMapping(value="batch",method=RequestMethod.POST)
	@ResponseBody
	public String batch(int[] arr){
		if(arr==null){
			return null;
		}
		String[] imgArr = service.findImgUrlById(arr);
		int batchDeletion = service.batchDeletion(arr);
		File f=null;
		if(batchDeletion>0){
			for(int i=0;i<imgArr.length;i++){
			 f=new File(imgArr[i]);
			 f.delete();
			}
			return "success";
		}
		return "error";
	}
	
	@RequestMapping(value="save",method=RequestMethod.POST)
	@ResponseBody
	public String save(FriendlyLink link){
		if(link==null){
			return null;
		}
		int saveFriendLink = service.saveFriendLink(link);
		if(saveFriendLink>1){
			return "success";
		}
		return "error";
	}
	@RequestMapping(value="appoint",method=RequestMethod.POST)
	@ResponseBody
	public FriendlyLink findFriendlyLinkById(int id){
		return service.findFriendlyLinkById(id);
	}
	
	@RequestMapping(value="update",method=RequestMethod.POST)
	@ResponseBody
	public String editFriendLyLink(FriendlyLink link){
		int i = service.updateFriendlyLink(link);
		if(i>0){
			return "success";
		}
		return "error";
	}
}
